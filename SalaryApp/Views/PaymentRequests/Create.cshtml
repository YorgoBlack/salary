@using SalaryApp.Models
@model SalaryApp.Models.PaymentRequestEditModel

@{
    ViewBag.Title = "Create";
}

@using (Html.BeginForm("Create", "PaymentRequests", FormMethod.Post, new { encType = "multipart/form-data" }))
{
@Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Новая заявка</h4>

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.ProjectCode, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.AutocompleteFor(m => m.ProjectCode, m => m.ProjectCode, "FindProjectByDept", "PaymentRequests", false, new { htmlAttributes = new { @class = "form-control" } })
        </div>
        @Html.LabelFor(model => model.ProjectShortName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.AutocompleteFor(m => m.ProjectShortName, m => m.ProjectShortName, "FindProjectByDept", "PaymentRequests", false, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>
    @if (Model.DepartmentId != -1)
    {
        <div class="form-group" id="SelectDepartmentId">
            @Html.LabelFor(model => model.DepartmentId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.DepartmentId, new SelectList(ViewBag.Departments, "DepartmentId", "Name"), new { @class = "form-control" })
                @Html.Raw("выбирается только в случае нового проекта")
            </div>
        </div>
    }
    <br />

    <div class="row recipients">
        <div class="form-group col-sm-1">
            @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label" })
        </div>
        <div class="form-group col-sm-3">
            @Html.AutocompleteFor(model => model.UserName, model => model.UserName, "FindUserByName", "PaymentRequests", false, new { htmlAttributes = new { @class = "form-control" } })
        </div>
        <div class="form-group col-sm-1">
            @Html.LabelFor(model => model.Sum, htmlAttributes: new { @class = "control-label" })
        </div>
        <div class="form-group col-sm-1">
            @Html.EditorFor(model => model.Sum, new { htmlAttributes = new { @class = "form-control" } })
        </div>
        <div class="form-group col-sm-1">
            @Html.EnumDropDownListFor(model => model.type, new { @class = "form-control" })
        </div>
    </div>
@for (int i = 0; i < Model.UserName_Add.Length; i++)
{
    <div class="row recipients" style="display:none;">
        <div class="form-group col-sm-1">
            @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label" })
        </div>
        <div class="form-group col-sm-3">
            @Html.AutocompleteFor(modelItem => Model.UserName_Add[i], model => model.UserName, "FindUserByName", "PaymentRequests", false, new { htmlAttributes = new { @class = "form-control" } })
        </div>
        <div class="form-group col-sm-1">
            @Html.LabelFor(model => model.Sum, htmlAttributes: new { @class = "control-label" })
        </div>
        <div class="form-group col-sm-1">
            @Html.EditorFor(modelItem => Model.Sum_Add[i], new { htmlAttributes = new { @class = "form-control" } })
        </div>
        <div class="form-group col-sm-1">
            @Html.EnumDropDownListFor(modelItem => Model.type_Add[i], new { @class = "form-control" })
        </div>
    </div>

}
    @Html.ValidationMessageFor(model => model.Sum, "", new { @class = "text-danger" })
    <br />
    <button type="submit" class="btn btn-success" onclick="AddRecipientLine();return false;"><span class="glyphicon glyphicon-plus"></span></button>

    <div class="form-group">
        @Html.LabelFor(model => model.AgreedPM, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.CheckBoxFor(model => model.AgreedPM, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.File, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.File, new { type = "file" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.Comments, 5, 200, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @if (this.User.IsInRole(SalaryRoles.Managers) || this.User.IsInRole(SalaryRoles.Assistant))
        {
            @Html.LabelFor(model => model.SetStateWaitConfirm, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.CheckBoxFor(model => model.SetStateWaitConfirm, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        }
        else if (this.User.IsInRole(SalaryRoles.Directors))
        {
            @Html.LabelFor(model => model.SetStateCredited, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.CheckBoxFor(model => model.SetStateCredited, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        }

    </div>

    <hr />
    <div class="form-group">
        <div class="col-md-10">
            <input type="submit" value="Создать заявку" class="btn btn-default" />
        </div>
    </div>
</div>
}


<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/typeahead")
    @Scripts.Render("~/bundles/comma_validate")

    <script type="text/javascript">

        $('input.typeahead').on('typeahead:selected', function (event, selection, name) {

            $('input.typeahead').typeahead('close');
            var pname = $('#' + this.id).val();
            var arr = pname.split(/[_-]/);
           
            
            if (this.id == 'ProjectCode' || this.id == 'ProjectShortName') {
                if (arr.length == 1) {
                    $('#ProjectCode').typeahead('val', '');
                    $('#ProjectShortName').typeahead('val', pname);
                    $('#ProjectShortName').val(pname);
                }
                else if (arr.length > 1) {
                    $('#ProjectCode').typeahead('val', arr[0]);
                    $('#ProjectCode').val(arr[0]);
                    
                    var pos1 = pname.indexOf('_');
                    if (pos1 === -1) pos1 = 111111111111;
                    var pos2 = pname.indexOf('-');
                    if (pos2 === -1) pos2 = 111111111111;
                    var pos = pos1 > pos2 ? pos2 : pos1;
                    pname = pname.substring(pos + 1);
                    $('#ProjectShortName').typeahead('val', pname);
                    $('#ProjectShortName').val(pname);
                }
                $('#' + this.id).typeahead('close');
            }
        });


        $("form").bind("keypress", function (e) {
            if (e.target.id != 'Comments') {
                if (e.keyCode == 13) return false;
            }
        });

        function AddRecipientLine() {
            var s = $('.recipients:hidden').first().show("fast");
        }



    </script>

}